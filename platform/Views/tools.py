# -*- coding: utf-8 -*-__author__ = "Lee.le"import osimport configparserimport requestsimport timeimport socketfrom django.template.defaulttags import registerimport platform@register.filterdef get_range(value):    return range(value)def get_addr():    try:        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)        s.connect(('8.8.8.8', 80))        addr = s.getsockname()[0]    finally:        s.close()    return addrdef case_translate():    CASELIST = {'模块1': 'ScriptName', '模块2': 'ScriptName2', '模块3': 'ScriptName3', '模块4': 'ScriptName4', '模块5': 'ScriptName5',}    return CASELISTdef rewrite_config(key, data):    """    :param key: config key    :param args: 需要修改的cobfig文件名    :return:    """    config = configparser.ConfigParser()    config_Path = (os.path.abspath(os.path.join(os.getcwd(), "../multi_processframe/config.ini")))  # 设置配置路径    temp = []    if key == 'testCase':        if isinstance(data, list):  # 判断传进来的数据包涵是否全是英文，带中文的需要解析，英文的直接重写进config            for i in list(data):                casename = case_translate()[i]                temp.append(casename)        else:            temp.append(data)    elif key == 'email':        temp.append(data)        print(temp)    elif key == 'installApk':        temp.append(data)    elif key == 'devicesList':        temp.append(data)    elif key == 'testtype':        temp.append(data)    elif key == 'performancetype':        temp.append(data)    elif key == 'packagepath':        temp.append(data)    elif key == 'installapk':        temp.append(data)    elif key == 'username':        temp.append(data)    elif key == 'password':        temp.append(data)    elif key == 'server':        temp.append(data)    elif key == 'uwatype':        temp.append(data)    elif key == 'progressnum':        temp.append(data)    getdata = str(temp).replace(" ", "").replace("[", "").replace("]", "").replace("'", "")    if key != "" and getdata != "":        config.read(config_Path)        config.set("config", key, getdata)        config.write(open(config_Path, "w"))def get_config(key):    config = configparser.ConfigParser()    config_Path = (os.path.abspath(os.path.join(os.getcwd(), "../multi_processframe/config.ini")))  # 设置配置路径    config.read(config_Path, encoding='utf-8-sig')    # config.read(path, encoding='GBK')    temp = config.get('config', key)    result_len = len(temp)    return result_lendef get_progresssnum(key):    config = configparser.ConfigParser()    config_Path = (os.path.abspath(os.path.join(os.getcwd(), "../multi_processframe/config.ini")))  # 设置配置路径    config.read(config_Path, encoding='utf-8-sig')    # config.read(path, encoding='GBK')    result_num = config.get('config', key)    return result_numdef download(url):    """    实现传入的URL参数下载包    :param url:    :return:    """    apkname = (url.split("/"))[-1]    localpath = os.path.abspath(os.path.join(os.getcwd(), "../apkPath"))    if not os.path.exists(localpath):        os.mkdir(localpath)    path = f"{localpath}/{apkname}"    start = time.time()  # 开始时间    size = 0    response = requests.get(url, stream=True)    chunk_size = 1024  # 每次下载的数据大小    content_size = int(response.headers['content-length'])  # 总大小    if response.status_code == 200:  # 通讯正常        print(f"【测试包大小】：{content_size // chunk_size // 1024} MB")        with open(path, "wb") as file:            for data in response.iter_content(chunk_size=100):                file.write(data)                size += len(data)  # 已经下载的文件大小                # \r制定第一个字符开始，搭配end实现进度条富凯                print(                    '\r' + "【下载进度】：%s%.2f%%" % ("▒" * int(size * 50 / content_size), float(size / content_size * 100)),                    end="")    end = time.time()    print('\n' + "全部下载完成！用时%.2f秒" % (end - start))    return pathdef getreport():    """    获取Report目录下所有html格式的报告    :return:    """    file_Path = os.path.join(os.getcwd(), "static/Report")    dir_List = os.listdir(file_Path)  # 返回包含目录中文件名的列表    html_List = {}  # 定义一个空列表，用来存储文件路径    htmlname = []    for i in range(len(dir_List)):        if dir_List[i] != '.gitignore' and dir_List[i] != 'script':            htmlname.append(dir_List[i])            reportname = dir_List[i].split("_")            html_List.update({reportname[1]: reportname[0]})  # 把满足上两个条件的的模块名称添加给script_List    html_List = sorted(html_List.items(), key=lambda d: d[0], reverse=True)    html_dic = {}    for i in html_List:        html_dic.update({i[0]: i[1]})    return html_dic, htmlnamedef get_workdevices():    """    实时读取连接的设备    :return:    """    deviceslist = []    for devices in os.popen("adb devices"):        if "\t" in devices:            if devices.find("emulator") < 0:                if devices.split("\t")[1] == "deviceconnect\n" or devices.split("\t")[1] == "device\n":                    deviceslist.append(devices.split("\t")[0])    return deviceslistdef get_key(dict, value):  # 通过value对比获得key值    return [k for k, v in dict.items() if v == value]def get_system():    """    获取系统版本    :return: 返回系统版本    """    system = platform.system()    return systemif __name__=="__main__":    url = "http://art.123u.com/lzghwnew4/arts/t_20190816144318.apk"